/* tslint:disable */
/* eslint-disable */
/**
 * Limo Booking App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BookingCreate
 */
export interface BookingCreate {
    /**
     * 
     * @type {string}
     * @memberof BookingCreate
     */
    'pickup_location': string;
    /**
     * 
     * @type {string}
     * @memberof BookingCreate
     */
    'destination': string;
    /**
     * 
     * @type {string}
     * @memberof BookingCreate
     */
    'ride_time': string;
    /**
     * 
     * @type {Price}
     * @memberof BookingCreate
     */
    'price'?: Price;
    /**
     * 
     * @type {string}
     * @memberof BookingCreate
     */
    'status'?: BookingCreateStatusEnum;
}

export const BookingCreateStatusEnum = {
    Pending: 'pending',
    Accepted: 'accepted',
    Completed: 'completed',
    Cancelled: 'cancelled'
} as const;

export type BookingCreateStatusEnum = typeof BookingCreateStatusEnum[keyof typeof BookingCreateStatusEnum];

/**
 * 
 * @export
 * @interface BookingRead
 */
export interface BookingRead {
    /**
     * 
     * @type {number}
     * @memberof BookingRead
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof BookingRead
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof BookingRead
     */
    'pickup_location': string;
    /**
     * 
     * @type {string}
     * @memberof BookingRead
     */
    'dropoff_location': string;
    /**
     * 
     * @type {string}
     * @memberof BookingRead
     */
    'time': string;
    /**
     * 
     * @type {string}
     * @memberof BookingRead
     */
    'price': string;
    /**
     * 
     * @type {string}
     * @memberof BookingRead
     */
    'status': BookingReadStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof BookingRead
     */
    'created_at'?: string | null;
}

export const BookingReadStatusEnum = {
    Pending: 'pending',
    Accepted: 'accepted',
    Completed: 'completed',
    Cancelled: 'cancelled'
} as const;

export type BookingReadStatusEnum = typeof BookingReadStatusEnum[keyof typeof BookingReadStatusEnum];

/**
 * 
 * @export
 * @interface BookingUpdate
 */
export interface BookingUpdate {
    /**
     * 
     * @type {string}
     * @memberof BookingUpdate
     */
    'status': BookingUpdateStatusEnum;
}

export const BookingUpdateStatusEnum = {
    Pending: 'pending',
    Accepted: 'accepted',
    Completed: 'completed',
    Cancelled: 'cancelled'
} as const;

export type BookingUpdateStatusEnum = typeof BookingUpdateStatusEnum[keyof typeof BookingUpdateStatusEnum];

/**
 * 
 * @export
 * @interface GeocodeResponse
 */
export interface GeocodeResponse {
    /**
     * 
     * @type {string}
     * @memberof GeocodeResponse
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface OAuth2Token
 */
export interface OAuth2Token {
    /**
     * 
     * @type {string}
     * @memberof OAuth2Token
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Token
     */
    'token_type'?: string;
}
/**
 * 
 * @export
 * @interface Price
 */
export interface Price {
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface SettingsPayload
 */
export interface SettingsPayload {
    /**
     * 
     * @type {boolean}
     * @memberof SettingsPayload
     */
    'account_mode': boolean;
    /**
     * 
     * @type {string}
     * @memberof SettingsPayload
     */
    'google_maps_api_key': string;
    /**
     * 
     * @type {number}
     * @memberof SettingsPayload
     */
    'flagfall': number;
    /**
     * 
     * @type {number}
     * @memberof SettingsPayload
     */
    'per_km_rate': number;
    /**
     * 
     * @type {number}
     * @memberof SettingsPayload
     */
    'per_minute_rate': number;
}
/**
 * 
 * @export
 * @interface SetupPayload
 */
export interface SetupPayload {
    /**
     * 
     * @type {string}
     * @memberof SetupPayload
     */
    'admin_email': string;
    /**
     * 
     * @type {string}
     * @memberof SetupPayload
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof SetupPayload
     */
    'admin_password': string;
    /**
     * 
     * @type {SettingsPayload}
     * @memberof SetupPayload
     */
    'settings': SettingsPayload;
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserRead
 */
export interface UserRead {
    /**
     * 
     * @type {string}
     * @memberof UserRead
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserRead
     */
    'full_name': string;
    /**
     * 
     * @type {number}
     * @memberof UserRead
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'full_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Endpoint Register
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointRegisterAuthRegisterPost: async (registerRequest: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('endpointRegisterAuthRegisterPost', 'registerRequest', registerRequest)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAuthLoginPost: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('loginAuthLoginPost', 'loginRequest', loginRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenAuthTokenPost: async (username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('tokenAuthTokenPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('tokenAuthTokenPost', 'password', password)
            const localVarPath = `/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenAuthTokenPost_1: async (username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('tokenAuthTokenPost_1', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('tokenAuthTokenPost_1', 'password', password)
            const localVarPath = `/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Endpoint Register
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endpointRegisterAuthRegisterPost(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointRegisterAuthRegisterPost(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.endpointRegisterAuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAuthLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAuthLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.loginAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenAuthTokenPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenAuthTokenPost(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.tokenAuthTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenAuthTokenPost_1(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenAuthTokenPost_1(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.tokenAuthTokenPost_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Endpoint Register
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointRegisterAuthRegisterPost(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.endpointRegisterAuthRegisterPost(registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAuthLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.loginAuthLoginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenAuthTokenPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<OAuth2Token> {
            return localVarFp.tokenAuthTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenAuthTokenPost_1(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<OAuth2Token> {
            return localVarFp.tokenAuthTokenPost_1(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Endpoint Register
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public endpointRegisterAuthRegisterPost(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).endpointRegisterAuthRegisterPost(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginAuthLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).loginAuthLoginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Token
     * @param {string} username 
     * @param {string} password 
     * @param {string | null} [grantType] 
     * @param {string} [scope] 
     * @param {string | null} [clientId] 
     * @param {string | null} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public tokenAuthTokenPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).tokenAuthTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Token
     * @param {string} username 
     * @param {string} password 
     * @param {string | null} [grantType] 
     * @param {string} [scope] 
     * @param {string | null} [clientId] 
     * @param {string | null} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public tokenAuthTokenPost_1(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).tokenAuthTokenPost_1(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookingsApi - axios parameter creator
 * @export
 */
export const BookingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Api Create Booking
         * @param {BookingCreate} bookingCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateBookingBookingsPost: async (bookingCreate: BookingCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingCreate' is not null or undefined
            assertParamExists('apiCreateBookingBookingsPost', 'bookingCreate', bookingCreate)
            const localVarPath = `/bookings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookingCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Api Delete Booking
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteBookingBookingsBookingIdDelete: async (bookingId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('apiDeleteBookingBookingsBookingIdDelete', 'bookingId', bookingId)
            const localVarPath = `/bookings/{booking_id}`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Api List Bookings
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListBookingsBookingsGet: async (skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Api Update Status
         * @param {number} bookingId 
         * @param {BookingUpdate} bookingUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateStatusBookingsBookingIdStatusPatch: async (bookingId: number, bookingUpdate: BookingUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('apiUpdateStatusBookingsBookingIdStatusPatch', 'bookingId', bookingId)
            // verify required parameter 'bookingUpdate' is not null or undefined
            assertParamExists('apiUpdateStatusBookingsBookingIdStatusPatch', 'bookingUpdate', bookingUpdate)
            const localVarPath = `/bookings/{booking_id}/status`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookingUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookingsApi - functional programming interface
 * @export
 */
export const BookingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Api Create Booking
         * @param {BookingCreate} bookingCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCreateBookingBookingsPost(bookingCreate: BookingCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCreateBookingBookingsPost(bookingCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.apiCreateBookingBookingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Api Delete Booking
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDeleteBookingBookingsBookingIdDelete(bookingId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDeleteBookingBookingsBookingIdDelete(bookingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.apiDeleteBookingBookingsBookingIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Api List Bookings
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiListBookingsBookingsGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookingRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiListBookingsBookingsGet(skip, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.apiListBookingsBookingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Api Update Status
         * @param {number} bookingId 
         * @param {BookingUpdate} bookingUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUpdateStatusBookingsBookingIdStatusPatch(bookingId: number, bookingUpdate: BookingUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUpdateStatusBookingsBookingIdStatusPatch(bookingId, bookingUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.apiUpdateStatusBookingsBookingIdStatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookingsApi - factory interface
 * @export
 */
export const BookingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Api Create Booking
         * @param {BookingCreate} bookingCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateBookingBookingsPost(bookingCreate: BookingCreate, options?: RawAxiosRequestConfig): AxiosPromise<BookingRead> {
            return localVarFp.apiCreateBookingBookingsPost(bookingCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Api Delete Booking
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteBookingBookingsBookingIdDelete(bookingId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDeleteBookingBookingsBookingIdDelete(bookingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Api List Bookings
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListBookingsBookingsGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<BookingRead>> {
            return localVarFp.apiListBookingsBookingsGet(skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Api Update Status
         * @param {number} bookingId 
         * @param {BookingUpdate} bookingUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateStatusBookingsBookingIdStatusPatch(bookingId: number, bookingUpdate: BookingUpdate, options?: RawAxiosRequestConfig): AxiosPromise<BookingRead> {
            return localVarFp.apiUpdateStatusBookingsBookingIdStatusPatch(bookingId, bookingUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookingsApi - object-oriented interface
 * @export
 * @class BookingsApi
 * @extends {BaseAPI}
 */
export class BookingsApi extends BaseAPI {
    /**
     * 
     * @summary Api Create Booking
     * @param {BookingCreate} bookingCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiCreateBookingBookingsPost(bookingCreate: BookingCreate, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).apiCreateBookingBookingsPost(bookingCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Api Delete Booking
     * @param {number} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiDeleteBookingBookingsBookingIdDelete(bookingId: number, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).apiDeleteBookingBookingsBookingIdDelete(bookingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Api List Bookings
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiListBookingsBookingsGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).apiListBookingsBookingsGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Api Update Status
     * @param {number} bookingId 
     * @param {BookingUpdate} bookingUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiUpdateStatusBookingsBookingIdStatusPatch(bookingId: number, bookingUpdate: BookingUpdate, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).apiUpdateStatusBookingsBookingIdStatusPatch(bookingId, bookingUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GeocodeApi - axios parameter creator
 * @export
 */
export const GeocodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Api Reverse Geocode
         * @param {number} lat 
         * @param {number} lon 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReverseGeocodeGeocodeReverseGet: async (lat: number, lon: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lat' is not null or undefined
            assertParamExists('apiReverseGeocodeGeocodeReverseGet', 'lat', lat)
            // verify required parameter 'lon' is not null or undefined
            assertParamExists('apiReverseGeocodeGeocodeReverseGet', 'lon', lon)
            const localVarPath = `/geocode/reverse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeocodeApi - functional programming interface
 * @export
 */
export const GeocodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeocodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Api Reverse Geocode
         * @param {number} lat 
         * @param {number} lon 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReverseGeocodeGeocodeReverseGet(lat: number, lon: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeocodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReverseGeocodeGeocodeReverseGet(lat, lon, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeocodeApi.apiReverseGeocodeGeocodeReverseGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GeocodeApi - factory interface
 * @export
 */
export const GeocodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeocodeApiFp(configuration)
    return {
        /**
         * 
         * @summary Api Reverse Geocode
         * @param {number} lat 
         * @param {number} lon 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReverseGeocodeGeocodeReverseGet(lat: number, lon: number, options?: RawAxiosRequestConfig): AxiosPromise<GeocodeResponse> {
            return localVarFp.apiReverseGeocodeGeocodeReverseGet(lat, lon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeocodeApi - object-oriented interface
 * @export
 * @class GeocodeApi
 * @extends {BaseAPI}
 */
export class GeocodeApi extends BaseAPI {
    /**
     * 
     * @summary Api Reverse Geocode
     * @param {number} lat 
     * @param {number} lon 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeocodeApi
     */
    public apiReverseGeocodeGeocodeReverseGet(lat: number, lon: number, options?: RawAxiosRequestConfig) {
        return GeocodeApiFp(this.configuration).apiReverseGeocodeGeocodeReverseGet(lat, lon, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RouteMetricsApi - axios parameter creator
 * @export
 */
export const RouteMetricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Compute distance and duration between two addresses
         * @param {string} pickup 
         * @param {string} dropoff 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRouteMetricsRouteMetricsGet: async (pickup: string, dropoff: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pickup' is not null or undefined
            assertParamExists('apiRouteMetricsRouteMetricsGet', 'pickup', pickup)
            // verify required parameter 'dropoff' is not null or undefined
            assertParamExists('apiRouteMetricsRouteMetricsGet', 'dropoff', dropoff)
            const localVarPath = `/route-metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pickup !== undefined) {
                localVarQueryParameter['pickup'] = pickup;
            }

            if (dropoff !== undefined) {
                localVarQueryParameter['dropoff'] = dropoff;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RouteMetricsApi - functional programming interface
 * @export
 */
export const RouteMetricsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RouteMetricsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Compute distance and duration between two addresses
         * @param {string} pickup 
         * @param {string} dropoff 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRouteMetricsRouteMetricsGet(pickup: string, dropoff: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRouteMetricsRouteMetricsGet(pickup, dropoff, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RouteMetricsApi.apiRouteMetricsRouteMetricsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RouteMetricsApi - factory interface
 * @export
 */
export const RouteMetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RouteMetricsApiFp(configuration)
    return {
        /**
         * 
         * @summary Compute distance and duration between two addresses
         * @param {string} pickup 
         * @param {string} dropoff 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRouteMetricsRouteMetricsGet(pickup: string, dropoff: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiRouteMetricsRouteMetricsGet(pickup, dropoff, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RouteMetricsApi - object-oriented interface
 * @export
 * @class RouteMetricsApi
 * @extends {BaseAPI}
 */
export class RouteMetricsApi extends BaseAPI {
    /**
     * 
     * @summary Compute distance and duration between two addresses
     * @param {string} pickup 
     * @param {string} dropoff 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RouteMetricsApi
     */
    public apiRouteMetricsRouteMetricsGet(pickup: string, dropoff: string, options?: RawAxiosRequestConfig) {
        return RouteMetricsApiFp(this.configuration).apiRouteMetricsRouteMetricsGet(pickup, dropoff, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Api Get Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetSettingsSettingsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Api Update Settings
         * @param {SettingsPayload} settingsPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateSettingsSettingsPut: async (settingsPayload: SettingsPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'settingsPayload' is not null or undefined
            assertParamExists('apiUpdateSettingsSettingsPut', 'settingsPayload', settingsPayload)
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(settingsPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Api Get Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetSettingsSettingsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGetSettingsSettingsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingsApi.apiGetSettingsSettingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Api Update Settings
         * @param {SettingsPayload} settingsPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUpdateSettingsSettingsPut(settingsPayload: SettingsPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUpdateSettingsSettingsPut(settingsPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingsApi.apiUpdateSettingsSettingsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Api Get Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetSettingsSettingsGet(options?: RawAxiosRequestConfig): AxiosPromise<SettingsPayload> {
            return localVarFp.apiGetSettingsSettingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Api Update Settings
         * @param {SettingsPayload} settingsPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateSettingsSettingsPut(settingsPayload: SettingsPayload, options?: RawAxiosRequestConfig): AxiosPromise<SettingsPayload> {
            return localVarFp.apiUpdateSettingsSettingsPut(settingsPayload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     * 
     * @summary Api Get Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public apiGetSettingsSettingsGet(options?: RawAxiosRequestConfig) {
        return SettingsApiFp(this.configuration).apiGetSettingsSettingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Api Update Settings
     * @param {SettingsPayload} settingsPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public apiUpdateSettingsSettingsPut(settingsPayload: SettingsPayload, options?: RawAxiosRequestConfig) {
        return SettingsApiFp(this.configuration).apiUpdateSettingsSettingsPut(settingsPayload, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SetupApi - axios parameter creator
 * @export
 */
export const SetupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Setup
         * @param {SetupPayload} setupPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupSetupPost: async (setupPayload: SetupPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setupPayload' is not null or undefined
            assertParamExists('setupSetupPost', 'setupPayload', setupPayload)
            const localVarPath = `/setup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setupPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Setup Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupStatusSetupGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/setup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SetupApi - functional programming interface
 * @export
 */
export const SetupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SetupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Setup
         * @param {SetupPayload} setupPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setupSetupPost(setupPayload: SetupPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setupSetupPost(setupPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SetupApi.setupSetupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Setup Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setupStatusSetupGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setupStatusSetupGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SetupApi.setupStatusSetupGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SetupApi - factory interface
 * @export
 */
export const SetupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SetupApiFp(configuration)
    return {
        /**
         * 
         * @summary Setup
         * @param {SetupPayload} setupPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupSetupPost(setupPayload: SetupPayload, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.setupSetupPost(setupPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Setup Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupStatusSetupGet(options?: RawAxiosRequestConfig): AxiosPromise<SettingsPayload> {
            return localVarFp.setupStatusSetupGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SetupApi - object-oriented interface
 * @export
 * @class SetupApi
 * @extends {BaseAPI}
 */
export class SetupApi extends BaseAPI {
    /**
     * 
     * @summary Setup
     * @param {SetupPayload} setupPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SetupApi
     */
    public setupSetupPost(setupPayload: SetupPayload, options?: RawAxiosRequestConfig) {
        return SetupApiFp(this.configuration).setupSetupPost(setupPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Setup Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SetupApi
     */
    public setupStatusSetupGet(options?: RawAxiosRequestConfig) {
        return SetupApiFp(this.configuration).setupStatusSetupGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Api Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateUserUsersPost: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('apiCreateUserUsersPost', 'userCreate', userCreate)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Api Delete User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteUserUsersUserIdDelete: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiDeleteUserUsersUserIdDelete', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Api Get User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetUserUsersUserIdGet: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiGetUserUsersUserIdGet', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Api List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListUsersUsersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Api Update User
         * @param {number} userId 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateUserUsersUserIdPatch: async (userId: number, userUpdate: UserUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiUpdateUserUsersUserIdPatch', 'userId', userId)
            // verify required parameter 'userUpdate' is not null or undefined
            assertParamExists('apiUpdateUserUsersUserIdPatch', 'userUpdate', userUpdate)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Api Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCreateUserUsersPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCreateUserUsersPost(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiCreateUserUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Api Delete User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDeleteUserUsersUserIdDelete(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDeleteUserUsersUserIdDelete(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiDeleteUserUsersUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Api Get User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetUserUsersUserIdGet(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGetUserUsersUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiGetUserUsersUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Api List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiListUsersUsersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiListUsersUsersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiListUsersUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Api Update User
         * @param {number} userId 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUpdateUserUsersUserIdPatch(userId: number, userUpdate: UserUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUpdateUserUsersUserIdPatch(userId, userUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUpdateUserUsersUserIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Api Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateUserUsersPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): AxiosPromise<UserRead> {
            return localVarFp.apiCreateUserUsersPost(userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Api Delete User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteUserUsersUserIdDelete(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDeleteUserUsersUserIdDelete(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Api Get User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetUserUsersUserIdGet(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<UserRead> {
            return localVarFp.apiGetUserUsersUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Api List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListUsersUsersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserRead>> {
            return localVarFp.apiListUsersUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Api Update User
         * @param {number} userId 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateUserUsersUserIdPatch(userId: number, userUpdate: UserUpdate, options?: RawAxiosRequestConfig): AxiosPromise<UserRead> {
            return localVarFp.apiUpdateUserUsersUserIdPatch(userId, userUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Api Create User
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiCreateUserUsersPost(userCreate: UserCreate, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiCreateUserUsersPost(userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Api Delete User
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiDeleteUserUsersUserIdDelete(userId: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiDeleteUserUsersUserIdDelete(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Api Get User
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiGetUserUsersUserIdGet(userId: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiGetUserUsersUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Api List Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiListUsersUsersGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiListUsersUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Api Update User
     * @param {number} userId 
     * @param {UserUpdate} userUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUpdateUserUsersUserIdPatch(userId: number, userUpdate: UserUpdate, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUpdateUserUsersUserIdPatch(userId, userUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}




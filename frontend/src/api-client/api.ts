/* tslint:disable */
/* eslint-disable */
/**
 * Limo Booking App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Breakdown of address parts returned by provider.
 * @export
 * @interface AddressComponents
 */
export interface AddressComponents {
    /**
     * 
     * @type {string}
     * @memberof AddressComponents
     */
    'house_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressComponents
     */
    'road'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressComponents
     */
    'suburb'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressComponents
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressComponents
     */
    'postcode'?: string | null;
}
/**
 * Representation of a booking returned from API.
 * @export
 * @interface AppSchemasBookingBookingRead
 */
export interface AppSchemasBookingBookingRead {
    /**
     * 
     * @type {number}
     * @memberof AppSchemasBookingBookingRead
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof AppSchemasBookingBookingRead
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingBookingRead
     */
    'pickup_location': string;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingBookingRead
     */
    'dropoff_location': string;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingBookingRead
     */
    'time': string;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingBookingRead
     */
    'price': string;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingBookingRead
     */
    'status': AppSchemasBookingBookingReadStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingBookingRead
     */
    'created_at'?: string | null;
}

export const AppSchemasBookingBookingReadStatusEnum = {
    Pending: 'pending',
    Accepted: 'accepted',
    Completed: 'completed',
    Cancelled: 'cancelled'
} as const;

export type AppSchemasBookingBookingReadStatusEnum = typeof AppSchemasBookingBookingReadStatusEnum[keyof typeof AppSchemasBookingBookingReadStatusEnum];

/**
 * 
 * @export
 * @interface AppSchemasBookingV2BookingRead
 */
export interface AppSchemasBookingV2BookingRead {
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'customer_id': string;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'pickup_address': string;
    /**
     * 
     * @type {number}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'pickup_lat': number;
    /**
     * 
     * @type {number}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'pickup_lng': number;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'dropoff_address': string;
    /**
     * 
     * @type {number}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'dropoff_lat': number;
    /**
     * 
     * @type {number}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'dropoff_lng': number;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'pickup_when': string;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'notes'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'passengers': number;
    /**
     * 
     * @type {number}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'estimated_price_cents': number;
    /**
     * 
     * @type {number}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'final_price_cents'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'deposit_required_cents': number;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'deposit_payment_intent_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'final_payment_intent_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'public_code': string;
    /**
     * 
     * @type {BookingStatus}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'status': BookingStatus;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'updated_at': string;
    /**
     * 
     * @type {string}
     * @memberof AppSchemasBookingV2BookingRead
     */
    'leave_at'?: string | null;
}


/**
 * 
 * @export
 * @interface AvailabilityResponse
 */
export interface AvailabilityResponse {
    /**
     * 
     * @type {Array<AvailabilitySlotRead>}
     * @memberof AvailabilityResponse
     */
    'slots': Array<AvailabilitySlotRead>;
    /**
     * 
     * @type {Array<BookingSlot>}
     * @memberof AvailabilityResponse
     */
    'bookings': Array<BookingSlot>;
}
/**
 * 
 * @export
 * @interface AvailabilitySlotCreate
 */
export interface AvailabilitySlotCreate {
    /**
     * 
     * @type {string}
     * @memberof AvailabilitySlotCreate
     */
    'start_dt': string;
    /**
     * 
     * @type {string}
     * @memberof AvailabilitySlotCreate
     */
    'end_dt': string;
    /**
     * 
     * @type {string}
     * @memberof AvailabilitySlotCreate
     */
    'reason'?: string | null;
}
/**
 * 
 * @export
 * @interface AvailabilitySlotRead
 */
export interface AvailabilitySlotRead {
    /**
     * 
     * @type {string}
     * @memberof AvailabilitySlotRead
     */
    'start_dt': string;
    /**
     * 
     * @type {string}
     * @memberof AvailabilitySlotRead
     */
    'end_dt': string;
    /**
     * 
     * @type {string}
     * @memberof AvailabilitySlotRead
     */
    'reason'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AvailabilitySlotRead
     */
    'id': number;
}
/**
 * Payload to create a new booking.
 * @export
 * @interface BookingCreate
 */
export interface BookingCreate {
    /**
     * 
     * @type {string}
     * @memberof BookingCreate
     */
    'pickup_location': string;
    /**
     * 
     * @type {string}
     * @memberof BookingCreate
     */
    'destination': string;
    /**
     * 
     * @type {string}
     * @memberof BookingCreate
     */
    'ride_time': string;
    /**
     * 
     * @type {Price}
     * @memberof BookingCreate
     */
    'price'?: Price;
    /**
     * 
     * @type {string}
     * @memberof BookingCreate
     */
    'status'?: BookingCreateStatusEnum;
}

export const BookingCreateStatusEnum = {
    Pending: 'pending',
    Accepted: 'accepted',
    Completed: 'completed',
    Cancelled: 'cancelled'
} as const;

export type BookingCreateStatusEnum = typeof BookingCreateStatusEnum[keyof typeof BookingCreateStatusEnum];

/**
 * 
 * @export
 * @interface BookingCreateRequest
 */
export interface BookingCreateRequest {
    /**
     * 
     * @type {CustomerInfo}
     * @memberof BookingCreateRequest
     */
    'customer': CustomerInfo;
    /**
     * 
     * @type {string}
     * @memberof BookingCreateRequest
     */
    'pickup_when': string;
    /**
     * 
     * @type {Location}
     * @memberof BookingCreateRequest
     */
    'pickup': Location;
    /**
     * 
     * @type {Location}
     * @memberof BookingCreateRequest
     */
    'dropoff': Location;
    /**
     * 
     * @type {number}
     * @memberof BookingCreateRequest
     */
    'passengers': number;
    /**
     * 
     * @type {string}
     * @memberof BookingCreateRequest
     */
    'notes'?: string | null;
}
/**
 * 
 * @export
 * @interface BookingCreateResponse
 */
export interface BookingCreateResponse {
    /**
     * 
     * @type {BookingPublic}
     * @memberof BookingCreateResponse
     */
    'booking': BookingPublic;
    /**
     * 
     * @type {StripeSetupIntent}
     * @memberof BookingCreateResponse
     */
    'stripe': StripeSetupIntent;
}
/**
 * 
 * @export
 * @interface BookingPublic
 */
export interface BookingPublic {
    /**
     * 
     * @type {string}
     * @memberof BookingPublic
     */
    'id': string;
    /**
     * 
     * @type {BookingStatus}
     * @memberof BookingPublic
     */
    'status': BookingStatus;
    /**
     * 
     * @type {string}
     * @memberof BookingPublic
     */
    'public_code': string;
    /**
     * 
     * @type {number}
     * @memberof BookingPublic
     */
    'estimated_price_cents': number;
    /**
     * 
     * @type {number}
     * @memberof BookingPublic
     */
    'deposit_required_cents': number;
}


/**
 * 
 * @export
 * @interface BookingSlot
 */
export interface BookingSlot {
    /**
     * 
     * @type {string}
     * @memberof BookingSlot
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BookingSlot
     */
    'pickup_when': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const BookingStatus = {
    Pending: 'PENDING',
    DriverConfirmed: 'DRIVER_CONFIRMED',
    Declined: 'DECLINED',
    OnTheWay: 'ON_THE_WAY',
    ArrivedPickup: 'ARRIVED_PICKUP',
    InProgress: 'IN_PROGRESS',
    ArrivedDropoff: 'ARRIVED_DROPOFF',
    Completed: 'COMPLETED',
    Cancelled: 'CANCELLED'
} as const;

export type BookingStatus = typeof BookingStatus[keyof typeof BookingStatus];


/**
 * 
 * @export
 * @interface BookingStatusResponse
 */
export interface BookingStatusResponse {
    /**
     * 
     * @type {BookingStatus}
     * @memberof BookingStatusResponse
     */
    'status': BookingStatus;
    /**
     * 
     * @type {string}
     * @memberof BookingStatusResponse
     */
    'leave_at'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BookingStatusResponse
     */
    'final_price_cents'?: number | null;
}


/**
 * Allowed fields when updating a booking.
 * @export
 * @interface BookingUpdate
 */
export interface BookingUpdate {
    /**
     * 
     * @type {string}
     * @memberof BookingUpdate
     */
    'status': BookingUpdateStatusEnum;
}

export const BookingUpdateStatusEnum = {
    Pending: 'pending',
    Accepted: 'accepted',
    Completed: 'completed',
    Cancelled: 'cancelled'
} as const;

export type BookingUpdateStatusEnum = typeof BookingUpdateStatusEnum[keyof typeof BookingUpdateStatusEnum];

/**
 * 
 * @export
 * @interface CustomerInfo
 */
export interface CustomerInfo {
    /**
     * 
     * @type {string}
     * @memberof CustomerInfo
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInfo
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInfo
     */
    'phone'?: string | null;
}
/**
 * Single address lookup result.
 * @export
 * @interface GeocodeResponse
 */
export interface GeocodeResponse {
    /**
     * 
     * @type {string}
     * @memberof GeocodeResponse
     */
    'address': string;
}
/**
 * Collection of geocode search results.
 * @export
 * @interface GeocodeSearchResponse
 */
export interface GeocodeSearchResponse {
    /**
     * 
     * @type {Array<GeocodeSearchResult>}
     * @memberof GeocodeSearchResponse
     */
    'results': Array<GeocodeSearchResult>;
}
/**
 * One item from a geocode search result list.
 * @export
 * @interface GeocodeSearchResult
 */
export interface GeocodeSearchResult {
    /**
     * 
     * @type {AddressComponents}
     * @memberof GeocodeSearchResult
     */
    'address': AddressComponents;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    'lat': number;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    'lng': number;
}
/**
 * User credentials supplied during login.
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * OAuth2 compliant access token.
 * @export
 * @interface OAuth2Token
 */
export interface OAuth2Token {
    /**
     * 
     * @type {string}
     * @memberof OAuth2Token
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Token
     */
    'token_type'?: string;
}
/**
 * 
 * @export
 * @interface Price
 */
export interface Price {
}
/**
 * Payload required to create a new user.
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password': string;
}
/**
 * Configuration values provided during setup.
 * @export
 * @interface SettingsPayload
 */
export interface SettingsPayload {
    /**
     * 
     * @type {boolean}
     * @memberof SettingsPayload
     */
    'account_mode': boolean;
    /**
     * 
     * @type {number}
     * @memberof SettingsPayload
     */
    'flagfall': number;
    /**
     * 
     * @type {number}
     * @memberof SettingsPayload
     */
    'per_km_rate': number;
    /**
     * 
     * @type {number}
     * @memberof SettingsPayload
     */
    'per_minute_rate': number;
}
/**
 * Payload containing admin user and settings.
 * @export
 * @interface SetupPayload
 */
export interface SetupPayload {
    /**
     * 
     * @type {string}
     * @memberof SetupPayload
     */
    'admin_email': string;
    /**
     * 
     * @type {string}
     * @memberof SetupPayload
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof SetupPayload
     */
    'admin_password': string;
    /**
     * 
     * @type {SettingsPayload}
     * @memberof SetupPayload
     */
    'settings': SettingsPayload;
}
/**
 * 
 * @export
 * @interface StripeSetupIntent
 */
export interface StripeSetupIntent {
    /**
     * 
     * @type {string}
     * @memberof StripeSetupIntent
     */
    'setup_intent_client_secret': string;
}
/**
 * 
 * @export
 * @interface TrackResponse
 */
export interface TrackResponse {
    /**
     * 
     * @type {AppSchemasBookingV2BookingRead}
     * @memberof TrackResponse
     */
    'booking': AppSchemasBookingV2BookingRead;
    /**
     * 
     * @type {string}
     * @memberof TrackResponse
     */
    'ws_url': string;
}
/**
 * Fields required when creating a user.
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'default_pickup_address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'password': string;
}
/**
 * User data returned from the API.
 * @export
 * @interface UserRead
 */
export interface UserRead {
    /**
     * 
     * @type {string}
     * @memberof UserRead
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserRead
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof UserRead
     */
    'default_pickup_address'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserRead
     */
    'id': number;
}
/**
 * Optional fields for updating a user.
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'full_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'default_pickup_address'?: string | null;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new user account.
         * @summary Endpoint Register
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointRegisterAuthRegisterPost: async (registerRequest: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('endpointRegisterAuthRegisterPost', 'registerRequest', registerRequest)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate user credentials and return an access token.
         * @summary Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAuthLoginPost: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('loginAuthLoginPost', 'loginRequest', loginRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exchange a username/password for an OAuth2 token.
         * @summary Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenAuthTokenPost: async (username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('tokenAuthTokenPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('tokenAuthTokenPost', 'password', password)
            const localVarPath = `/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exchange a username/password for an OAuth2 token.
         * @summary Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenAuthTokenPost_1: async (username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('tokenAuthTokenPost_1', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('tokenAuthTokenPost_1', 'password', password)
            const localVarPath = `/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new user account.
         * @summary Endpoint Register
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endpointRegisterAuthRegisterPost(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointRegisterAuthRegisterPost(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.endpointRegisterAuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Validate user credentials and return an access token.
         * @summary Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAuthLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAuthLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.loginAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Exchange a username/password for an OAuth2 token.
         * @summary Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenAuthTokenPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenAuthTokenPost(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.tokenAuthTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Exchange a username/password for an OAuth2 token.
         * @summary Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenAuthTokenPost_1(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenAuthTokenPost_1(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.tokenAuthTokenPost_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Create a new user account.
         * @summary Endpoint Register
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointRegisterAuthRegisterPost(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.endpointRegisterAuthRegisterPost(registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Validate user credentials and return an access token.
         * @summary Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAuthLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.loginAuthLoginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Exchange a username/password for an OAuth2 token.
         * @summary Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenAuthTokenPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<OAuth2Token> {
            return localVarFp.tokenAuthTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * Exchange a username/password for an OAuth2 token.
         * @summary Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenAuthTokenPost_1(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<OAuth2Token> {
            return localVarFp.tokenAuthTokenPost_1(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Create a new user account.
     * @summary Endpoint Register
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public endpointRegisterAuthRegisterPost(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).endpointRegisterAuthRegisterPost(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validate user credentials and return an access token.
     * @summary Login
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginAuthLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).loginAuthLoginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exchange a username/password for an OAuth2 token.
     * @summary Token
     * @param {string} username 
     * @param {string} password 
     * @param {string | null} [grantType] 
     * @param {string} [scope] 
     * @param {string | null} [clientId] 
     * @param {string | null} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public tokenAuthTokenPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).tokenAuthTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exchange a username/password for an OAuth2 token.
     * @summary Token
     * @param {string} username 
     * @param {string} password 
     * @param {string | null} [grantType] 
     * @param {string} [scope] 
     * @param {string | null} [clientId] 
     * @param {string | null} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public tokenAuthTokenPost_1(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).tokenAuthTokenPost_1(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AvailabilityApi - axios parameter creator
 * @export
 */
export const AvailabilityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a manual availability block.
         * @summary Create Slot
         * @param {AvailabilitySlotCreate} availabilitySlotCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSlotApiV1AvailabilityPost: async (availabilitySlotCreate: AvailabilitySlotCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'availabilitySlotCreate' is not null or undefined
            assertParamExists('createSlotApiV1AvailabilityPost', 'availabilitySlotCreate', availabilitySlotCreate)
            const localVarPath = `/api/v1/availability`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(availabilitySlotCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return availability slots and confirmed bookings for a given month.
         * @summary Get Availability
         * @param {string} month 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailabilityApiV1AvailabilityGet: async (month: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getAvailabilityApiV1AvailabilityGet', 'month', month)
            const localVarPath = `/api/v1/availability`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AvailabilityApi - functional programming interface
 * @export
 */
export const AvailabilityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AvailabilityApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a manual availability block.
         * @summary Create Slot
         * @param {AvailabilitySlotCreate} availabilitySlotCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSlotApiV1AvailabilityPost(availabilitySlotCreate: AvailabilitySlotCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailabilitySlotRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSlotApiV1AvailabilityPost(availabilitySlotCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AvailabilityApi.createSlotApiV1AvailabilityPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return availability slots and confirmed bookings for a given month.
         * @summary Get Availability
         * @param {string} month 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailabilityApiV1AvailabilityGet(month: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailabilityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailabilityApiV1AvailabilityGet(month, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AvailabilityApi.getAvailabilityApiV1AvailabilityGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AvailabilityApi - factory interface
 * @export
 */
export const AvailabilityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AvailabilityApiFp(configuration)
    return {
        /**
         * Create a manual availability block.
         * @summary Create Slot
         * @param {AvailabilitySlotCreate} availabilitySlotCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSlotApiV1AvailabilityPost(availabilitySlotCreate: AvailabilitySlotCreate, options?: RawAxiosRequestConfig): AxiosPromise<AvailabilitySlotRead> {
            return localVarFp.createSlotApiV1AvailabilityPost(availabilitySlotCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Return availability slots and confirmed bookings for a given month.
         * @summary Get Availability
         * @param {string} month 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailabilityApiV1AvailabilityGet(month: string, options?: RawAxiosRequestConfig): AxiosPromise<AvailabilityResponse> {
            return localVarFp.getAvailabilityApiV1AvailabilityGet(month, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AvailabilityApi - object-oriented interface
 * @export
 * @class AvailabilityApi
 * @extends {BaseAPI}
 */
export class AvailabilityApi extends BaseAPI {
    /**
     * Create a manual availability block.
     * @summary Create Slot
     * @param {AvailabilitySlotCreate} availabilitySlotCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailabilityApi
     */
    public createSlotApiV1AvailabilityPost(availabilitySlotCreate: AvailabilitySlotCreate, options?: RawAxiosRequestConfig) {
        return AvailabilityApiFp(this.configuration).createSlotApiV1AvailabilityPost(availabilitySlotCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return availability slots and confirmed bookings for a given month.
     * @summary Get Availability
     * @param {string} month 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailabilityApi
     */
    public getAvailabilityApiV1AvailabilityGet(month: string, options?: RawAxiosRequestConfig) {
        return AvailabilityApiFp(this.configuration).getAvailabilityApiV1AvailabilityGet(month, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookingsApi - axios parameter creator
 * @export
 */
export const BookingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new booking for the current user.
         * @summary Api Create Booking
         * @param {BookingCreate} bookingCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateBookingBookingsPost: async (bookingCreate: BookingCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingCreate' is not null or undefined
            assertParamExists('apiCreateBookingBookingsPost', 'bookingCreate', bookingCreate)
            const localVarPath = `/bookings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookingCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a booking from the system.
         * @summary Api Delete Booking
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteBookingBookingsBookingIdDelete: async (bookingId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('apiDeleteBookingBookingsBookingIdDelete', 'bookingId', bookingId)
            const localVarPath = `/bookings/{booking_id}`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List bookings for the authenticated user.
         * @summary Api List Bookings
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListBookingsBookingsGet: async (skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the status of an existing booking.
         * @summary Api Update Status
         * @param {number} bookingId 
         * @param {BookingUpdate} bookingUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateStatusBookingsBookingIdStatusPatch: async (bookingId: number, bookingUpdate: BookingUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('apiUpdateStatusBookingsBookingIdStatusPatch', 'bookingId', bookingId)
            // verify required parameter 'bookingUpdate' is not null or undefined
            assertParamExists('apiUpdateStatusBookingsBookingIdStatusPatch', 'bookingUpdate', bookingUpdate)
            const localVarPath = `/bookings/{booking_id}/status`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookingUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Booking Endpoint
         * @param {BookingCreateRequest} bookingCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBookingEndpointApiV1BookingsPost: async (bookingCreateRequest: BookingCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingCreateRequest' is not null or undefined
            assertParamExists('createBookingEndpointApiV1BookingsPost', 'bookingCreateRequest', bookingCreateRequest)
            const localVarPath = `/api/v1/bookings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookingCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookingsApi - functional programming interface
 * @export
 */
export const BookingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new booking for the current user.
         * @summary Api Create Booking
         * @param {BookingCreate} bookingCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCreateBookingBookingsPost(bookingCreate: BookingCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSchemasBookingBookingRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCreateBookingBookingsPost(bookingCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.apiCreateBookingBookingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove a booking from the system.
         * @summary Api Delete Booking
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDeleteBookingBookingsBookingIdDelete(bookingId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDeleteBookingBookingsBookingIdDelete(bookingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.apiDeleteBookingBookingsBookingIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List bookings for the authenticated user.
         * @summary Api List Bookings
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiListBookingsBookingsGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppSchemasBookingBookingRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiListBookingsBookingsGet(skip, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.apiListBookingsBookingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the status of an existing booking.
         * @summary Api Update Status
         * @param {number} bookingId 
         * @param {BookingUpdate} bookingUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUpdateStatusBookingsBookingIdStatusPatch(bookingId: number, bookingUpdate: BookingUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSchemasBookingBookingRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUpdateStatusBookingsBookingIdStatusPatch(bookingId, bookingUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.apiUpdateStatusBookingsBookingIdStatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Booking Endpoint
         * @param {BookingCreateRequest} bookingCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBookingEndpointApiV1BookingsPost(bookingCreateRequest: BookingCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBookingEndpointApiV1BookingsPost(bookingCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.createBookingEndpointApiV1BookingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookingsApi - factory interface
 * @export
 */
export const BookingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookingsApiFp(configuration)
    return {
        /**
         * Create a new booking for the current user.
         * @summary Api Create Booking
         * @param {BookingCreate} bookingCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateBookingBookingsPost(bookingCreate: BookingCreate, options?: RawAxiosRequestConfig): AxiosPromise<AppSchemasBookingBookingRead> {
            return localVarFp.apiCreateBookingBookingsPost(bookingCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a booking from the system.
         * @summary Api Delete Booking
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteBookingBookingsBookingIdDelete(bookingId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDeleteBookingBookingsBookingIdDelete(bookingId, options).then((request) => request(axios, basePath));
        },
        /**
         * List bookings for the authenticated user.
         * @summary Api List Bookings
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListBookingsBookingsGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<AppSchemasBookingBookingRead>> {
            return localVarFp.apiListBookingsBookingsGet(skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the status of an existing booking.
         * @summary Api Update Status
         * @param {number} bookingId 
         * @param {BookingUpdate} bookingUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateStatusBookingsBookingIdStatusPatch(bookingId: number, bookingUpdate: BookingUpdate, options?: RawAxiosRequestConfig): AxiosPromise<AppSchemasBookingBookingRead> {
            return localVarFp.apiUpdateStatusBookingsBookingIdStatusPatch(bookingId, bookingUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Booking Endpoint
         * @param {BookingCreateRequest} bookingCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBookingEndpointApiV1BookingsPost(bookingCreateRequest: BookingCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<BookingCreateResponse> {
            return localVarFp.createBookingEndpointApiV1BookingsPost(bookingCreateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookingsApi - object-oriented interface
 * @export
 * @class BookingsApi
 * @extends {BaseAPI}
 */
export class BookingsApi extends BaseAPI {
    /**
     * Create a new booking for the current user.
     * @summary Api Create Booking
     * @param {BookingCreate} bookingCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiCreateBookingBookingsPost(bookingCreate: BookingCreate, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).apiCreateBookingBookingsPost(bookingCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a booking from the system.
     * @summary Api Delete Booking
     * @param {number} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiDeleteBookingBookingsBookingIdDelete(bookingId: number, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).apiDeleteBookingBookingsBookingIdDelete(bookingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List bookings for the authenticated user.
     * @summary Api List Bookings
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiListBookingsBookingsGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).apiListBookingsBookingsGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the status of an existing booking.
     * @summary Api Update Status
     * @param {number} bookingId 
     * @param {BookingUpdate} bookingUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiUpdateStatusBookingsBookingIdStatusPatch(bookingId: number, bookingUpdate: BookingUpdate, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).apiUpdateStatusBookingsBookingIdStatusPatch(bookingId, bookingUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Booking Endpoint
     * @param {BookingCreateRequest} bookingCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public createBookingEndpointApiV1BookingsPost(bookingCreateRequest: BookingCreateRequest, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).createBookingEndpointApiV1BookingsPost(bookingCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerBookingsApi - axios parameter creator
 * @export
 */
export const CustomerBookingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List My Bookings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyBookingsApiV1CustomersMeBookingsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/customers/me/bookings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerBookingsApi - functional programming interface
 * @export
 */
export const CustomerBookingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerBookingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List My Bookings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMyBookingsApiV1CustomersMeBookingsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppSchemasBookingV2BookingRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMyBookingsApiV1CustomersMeBookingsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerBookingsApi.listMyBookingsApiV1CustomersMeBookingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerBookingsApi - factory interface
 * @export
 */
export const CustomerBookingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerBookingsApiFp(configuration)
    return {
        /**
         * 
         * @summary List My Bookings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyBookingsApiV1CustomersMeBookingsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<AppSchemasBookingV2BookingRead>> {
            return localVarFp.listMyBookingsApiV1CustomersMeBookingsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerBookingsApi - object-oriented interface
 * @export
 * @class CustomerBookingsApi
 * @extends {BaseAPI}
 */
export class CustomerBookingsApi extends BaseAPI {
    /**
     * 
     * @summary List My Bookings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerBookingsApi
     */
    public listMyBookingsApiV1CustomersMeBookingsGet(options?: RawAxiosRequestConfig) {
        return CustomerBookingsApiFp(this.configuration).listMyBookingsApiV1CustomersMeBookingsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DriverBookingsApi - axios parameter creator
 * @export
 */
export const DriverBookingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Arrive Dropoff
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        arriveDropoffApiV1DriverBookingsBookingIdArriveDropoffPost: async (bookingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('arriveDropoffApiV1DriverBookingsBookingIdArriveDropoffPost', 'bookingId', bookingId)
            const localVarPath = `/api/v1/driver/bookings/{booking_id}/arrive-dropoff`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Arrive Pickup
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        arrivePickupApiV1DriverBookingsBookingIdArrivePickupPost: async (bookingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('arrivePickupApiV1DriverBookingsBookingIdArrivePickupPost', 'bookingId', bookingId)
            const localVarPath = `/api/v1/driver/bookings/{booking_id}/arrive-pickup`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Complete Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeBookingApiV1DriverBookingsBookingIdCompletePost: async (bookingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('completeBookingApiV1DriverBookingsBookingIdCompletePost', 'bookingId', bookingId)
            const localVarPath = `/api/v1/driver/bookings/{booking_id}/complete`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmBookingApiV1DriverBookingsBookingIdConfirmPost: async (bookingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('confirmBookingApiV1DriverBookingsBookingIdConfirmPost', 'bookingId', bookingId)
            const localVarPath = `/api/v1/driver/bookings/{booking_id}/confirm`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Decline Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineBookingApiV1DriverBookingsBookingIdDeclinePost: async (bookingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('declineBookingApiV1DriverBookingsBookingIdDeclinePost', 'bookingId', bookingId)
            const localVarPath = `/api/v1/driver/bookings/{booking_id}/decline`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Leave Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveBookingApiV1DriverBookingsBookingIdLeavePost: async (bookingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('leaveBookingApiV1DriverBookingsBookingIdLeavePost', 'bookingId', bookingId)
            const localVarPath = `/api/v1/driver/bookings/{booking_id}/leave`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Bookings
         * @param {BookingStatus | null} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookingsApiV1DriverBookingsGet: async (status?: BookingStatus | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/driver/bookings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start Trip
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startTripApiV1DriverBookingsBookingIdStartTripPost: async (bookingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('startTripApiV1DriverBookingsBookingIdStartTripPost', 'bookingId', bookingId)
            const localVarPath = `/api/v1/driver/bookings/{booking_id}/start-trip`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DriverBookingsApi - functional programming interface
 * @export
 */
export const DriverBookingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DriverBookingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Arrive Dropoff
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async arriveDropoffApiV1DriverBookingsBookingIdArriveDropoffPost(bookingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.arriveDropoffApiV1DriverBookingsBookingIdArriveDropoffPost(bookingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverBookingsApi.arriveDropoffApiV1DriverBookingsBookingIdArriveDropoffPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Arrive Pickup
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async arrivePickupApiV1DriverBookingsBookingIdArrivePickupPost(bookingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.arrivePickupApiV1DriverBookingsBookingIdArrivePickupPost(bookingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverBookingsApi.arrivePickupApiV1DriverBookingsBookingIdArrivePickupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Complete Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeBookingApiV1DriverBookingsBookingIdCompletePost(bookingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeBookingApiV1DriverBookingsBookingIdCompletePost(bookingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverBookingsApi.completeBookingApiV1DriverBookingsBookingIdCompletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Confirm Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmBookingApiV1DriverBookingsBookingIdConfirmPost(bookingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmBookingApiV1DriverBookingsBookingIdConfirmPost(bookingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverBookingsApi.confirmBookingApiV1DriverBookingsBookingIdConfirmPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Decline Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async declineBookingApiV1DriverBookingsBookingIdDeclinePost(bookingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.declineBookingApiV1DriverBookingsBookingIdDeclinePost(bookingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverBookingsApi.declineBookingApiV1DriverBookingsBookingIdDeclinePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Leave Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaveBookingApiV1DriverBookingsBookingIdLeavePost(bookingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaveBookingApiV1DriverBookingsBookingIdLeavePost(bookingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverBookingsApi.leaveBookingApiV1DriverBookingsBookingIdLeavePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Bookings
         * @param {BookingStatus | null} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBookingsApiV1DriverBookingsGet(status?: BookingStatus | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppSchemasBookingV2BookingRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBookingsApiV1DriverBookingsGet(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverBookingsApi.listBookingsApiV1DriverBookingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Start Trip
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startTripApiV1DriverBookingsBookingIdStartTripPost(bookingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startTripApiV1DriverBookingsBookingIdStartTripPost(bookingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverBookingsApi.startTripApiV1DriverBookingsBookingIdStartTripPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DriverBookingsApi - factory interface
 * @export
 */
export const DriverBookingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DriverBookingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Arrive Dropoff
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        arriveDropoffApiV1DriverBookingsBookingIdArriveDropoffPost(bookingId: string, options?: RawAxiosRequestConfig): AxiosPromise<BookingStatusResponse> {
            return localVarFp.arriveDropoffApiV1DriverBookingsBookingIdArriveDropoffPost(bookingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Arrive Pickup
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        arrivePickupApiV1DriverBookingsBookingIdArrivePickupPost(bookingId: string, options?: RawAxiosRequestConfig): AxiosPromise<BookingStatusResponse> {
            return localVarFp.arrivePickupApiV1DriverBookingsBookingIdArrivePickupPost(bookingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Complete Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeBookingApiV1DriverBookingsBookingIdCompletePost(bookingId: string, options?: RawAxiosRequestConfig): AxiosPromise<BookingStatusResponse> {
            return localVarFp.completeBookingApiV1DriverBookingsBookingIdCompletePost(bookingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmBookingApiV1DriverBookingsBookingIdConfirmPost(bookingId: string, options?: RawAxiosRequestConfig): AxiosPromise<BookingStatusResponse> {
            return localVarFp.confirmBookingApiV1DriverBookingsBookingIdConfirmPost(bookingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Decline Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineBookingApiV1DriverBookingsBookingIdDeclinePost(bookingId: string, options?: RawAxiosRequestConfig): AxiosPromise<BookingStatusResponse> {
            return localVarFp.declineBookingApiV1DriverBookingsBookingIdDeclinePost(bookingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Leave Booking
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveBookingApiV1DriverBookingsBookingIdLeavePost(bookingId: string, options?: RawAxiosRequestConfig): AxiosPromise<BookingStatusResponse> {
            return localVarFp.leaveBookingApiV1DriverBookingsBookingIdLeavePost(bookingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Bookings
         * @param {BookingStatus | null} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookingsApiV1DriverBookingsGet(status?: BookingStatus | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<AppSchemasBookingV2BookingRead>> {
            return localVarFp.listBookingsApiV1DriverBookingsGet(status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start Trip
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startTripApiV1DriverBookingsBookingIdStartTripPost(bookingId: string, options?: RawAxiosRequestConfig): AxiosPromise<BookingStatusResponse> {
            return localVarFp.startTripApiV1DriverBookingsBookingIdStartTripPost(bookingId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DriverBookingsApi - object-oriented interface
 * @export
 * @class DriverBookingsApi
 * @extends {BaseAPI}
 */
export class DriverBookingsApi extends BaseAPI {
    /**
     * 
     * @summary Arrive Dropoff
     * @param {string} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverBookingsApi
     */
    public arriveDropoffApiV1DriverBookingsBookingIdArriveDropoffPost(bookingId: string, options?: RawAxiosRequestConfig) {
        return DriverBookingsApiFp(this.configuration).arriveDropoffApiV1DriverBookingsBookingIdArriveDropoffPost(bookingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Arrive Pickup
     * @param {string} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverBookingsApi
     */
    public arrivePickupApiV1DriverBookingsBookingIdArrivePickupPost(bookingId: string, options?: RawAxiosRequestConfig) {
        return DriverBookingsApiFp(this.configuration).arrivePickupApiV1DriverBookingsBookingIdArrivePickupPost(bookingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Complete Booking
     * @param {string} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverBookingsApi
     */
    public completeBookingApiV1DriverBookingsBookingIdCompletePost(bookingId: string, options?: RawAxiosRequestConfig) {
        return DriverBookingsApiFp(this.configuration).completeBookingApiV1DriverBookingsBookingIdCompletePost(bookingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Confirm Booking
     * @param {string} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverBookingsApi
     */
    public confirmBookingApiV1DriverBookingsBookingIdConfirmPost(bookingId: string, options?: RawAxiosRequestConfig) {
        return DriverBookingsApiFp(this.configuration).confirmBookingApiV1DriverBookingsBookingIdConfirmPost(bookingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Decline Booking
     * @param {string} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverBookingsApi
     */
    public declineBookingApiV1DriverBookingsBookingIdDeclinePost(bookingId: string, options?: RawAxiosRequestConfig) {
        return DriverBookingsApiFp(this.configuration).declineBookingApiV1DriverBookingsBookingIdDeclinePost(bookingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Leave Booking
     * @param {string} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverBookingsApi
     */
    public leaveBookingApiV1DriverBookingsBookingIdLeavePost(bookingId: string, options?: RawAxiosRequestConfig) {
        return DriverBookingsApiFp(this.configuration).leaveBookingApiV1DriverBookingsBookingIdLeavePost(bookingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Bookings
     * @param {BookingStatus | null} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverBookingsApi
     */
    public listBookingsApiV1DriverBookingsGet(status?: BookingStatus | null, options?: RawAxiosRequestConfig) {
        return DriverBookingsApiFp(this.configuration).listBookingsApiV1DriverBookingsGet(status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start Trip
     * @param {string} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverBookingsApi
     */
    public startTripApiV1DriverBookingsBookingIdStartTripPost(bookingId: string, options?: RawAxiosRequestConfig) {
        return DriverBookingsApiFp(this.configuration).startTripApiV1DriverBookingsBookingIdStartTripPost(bookingId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GeocodeApi - axios parameter creator
 * @export
 */
export const GeocodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Search for addresses matching a query string.
         * @summary Api Geocode Search
         * @param {string} q 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGeocodeSearchGeocodeSearchGet: async (q: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('apiGeocodeSearchGeocodeSearchGet', 'q', q)
            const localVarPath = `/geocode/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Look up an address from latitude and longitude.
         * @summary Api Reverse Geocode
         * @param {number} lat 
         * @param {number} lon 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReverseGeocodeGeocodeReverseGet: async (lat: number, lon: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lat' is not null or undefined
            assertParamExists('apiReverseGeocodeGeocodeReverseGet', 'lat', lat)
            // verify required parameter 'lon' is not null or undefined
            assertParamExists('apiReverseGeocodeGeocodeReverseGet', 'lon', lon)
            const localVarPath = `/geocode/reverse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeocodeApi - functional programming interface
 * @export
 */
export const GeocodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeocodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Search for addresses matching a query string.
         * @summary Api Geocode Search
         * @param {string} q 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGeocodeSearchGeocodeSearchGet(q: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeocodeSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGeocodeSearchGeocodeSearchGet(q, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeocodeApi.apiGeocodeSearchGeocodeSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Look up an address from latitude and longitude.
         * @summary Api Reverse Geocode
         * @param {number} lat 
         * @param {number} lon 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReverseGeocodeGeocodeReverseGet(lat: number, lon: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeocodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReverseGeocodeGeocodeReverseGet(lat, lon, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeocodeApi.apiReverseGeocodeGeocodeReverseGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GeocodeApi - factory interface
 * @export
 */
export const GeocodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeocodeApiFp(configuration)
    return {
        /**
         * Search for addresses matching a query string.
         * @summary Api Geocode Search
         * @param {string} q 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGeocodeSearchGeocodeSearchGet(q: string, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<GeocodeSearchResponse> {
            return localVarFp.apiGeocodeSearchGeocodeSearchGet(q, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Look up an address from latitude and longitude.
         * @summary Api Reverse Geocode
         * @param {number} lat 
         * @param {number} lon 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReverseGeocodeGeocodeReverseGet(lat: number, lon: number, options?: RawAxiosRequestConfig): AxiosPromise<GeocodeResponse> {
            return localVarFp.apiReverseGeocodeGeocodeReverseGet(lat, lon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeocodeApi - object-oriented interface
 * @export
 * @class GeocodeApi
 * @extends {BaseAPI}
 */
export class GeocodeApi extends BaseAPI {
    /**
     * Search for addresses matching a query string.
     * @summary Api Geocode Search
     * @param {string} q 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeocodeApi
     */
    public apiGeocodeSearchGeocodeSearchGet(q: string, limit?: number, options?: RawAxiosRequestConfig) {
        return GeocodeApiFp(this.configuration).apiGeocodeSearchGeocodeSearchGet(q, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Look up an address from latitude and longitude.
     * @summary Api Reverse Geocode
     * @param {number} lat 
     * @param {number} lon 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeocodeApi
     */
    public apiReverseGeocodeGeocodeReverseGet(lat: number, lon: number, options?: RawAxiosRequestConfig) {
        return GeocodeApiFp(this.configuration).apiReverseGeocodeGeocodeReverseGet(lat, lon, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RouteMetricsApi - axios parameter creator
 * @export
 */
export const RouteMetricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return travel metrics between pickup and dropoff addresses.
         * @summary Compute distance and duration between two addresses
         * @param {string} pickup 
         * @param {string} dropoff 
         * @param {string | null} [rideTime] Desired pickup time to account for traffic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRouteMetricsRouteMetricsGet: async (pickup: string, dropoff: string, rideTime?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pickup' is not null or undefined
            assertParamExists('apiRouteMetricsRouteMetricsGet', 'pickup', pickup)
            // verify required parameter 'dropoff' is not null or undefined
            assertParamExists('apiRouteMetricsRouteMetricsGet', 'dropoff', dropoff)
            const localVarPath = `/route-metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pickup !== undefined) {
                localVarQueryParameter['pickup'] = pickup;
            }

            if (dropoff !== undefined) {
                localVarQueryParameter['dropoff'] = dropoff;
            }

            if (rideTime !== undefined) {
                localVarQueryParameter['ride_time'] = (rideTime as any instanceof Date) ?
                    (rideTime as any).toISOString() :
                    rideTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RouteMetricsApi - functional programming interface
 * @export
 */
export const RouteMetricsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RouteMetricsApiAxiosParamCreator(configuration)
    return {
        /**
         * Return travel metrics between pickup and dropoff addresses.
         * @summary Compute distance and duration between two addresses
         * @param {string} pickup 
         * @param {string} dropoff 
         * @param {string | null} [rideTime] Desired pickup time to account for traffic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRouteMetricsRouteMetricsGet(pickup: string, dropoff: string, rideTime?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRouteMetricsRouteMetricsGet(pickup, dropoff, rideTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RouteMetricsApi.apiRouteMetricsRouteMetricsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RouteMetricsApi - factory interface
 * @export
 */
export const RouteMetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RouteMetricsApiFp(configuration)
    return {
        /**
         * Return travel metrics between pickup and dropoff addresses.
         * @summary Compute distance and duration between two addresses
         * @param {string} pickup 
         * @param {string} dropoff 
         * @param {string | null} [rideTime] Desired pickup time to account for traffic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRouteMetricsRouteMetricsGet(pickup: string, dropoff: string, rideTime?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiRouteMetricsRouteMetricsGet(pickup, dropoff, rideTime, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RouteMetricsApi - object-oriented interface
 * @export
 * @class RouteMetricsApi
 * @extends {BaseAPI}
 */
export class RouteMetricsApi extends BaseAPI {
    /**
     * Return travel metrics between pickup and dropoff addresses.
     * @summary Compute distance and duration between two addresses
     * @param {string} pickup 
     * @param {string} dropoff 
     * @param {string | null} [rideTime] Desired pickup time to account for traffic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RouteMetricsApi
     */
    public apiRouteMetricsRouteMetricsGet(pickup: string, dropoff: string, rideTime?: string | null, options?: RawAxiosRequestConfig) {
        return RouteMetricsApiFp(this.configuration).apiRouteMetricsRouteMetricsGet(pickup, dropoff, rideTime, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return current pricing and configuration.
         * @summary Api Get Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetSettingsSettingsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Persist updated configuration values.
         * @summary Api Update Settings
         * @param {SettingsPayload} settingsPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateSettingsSettingsPut: async (settingsPayload: SettingsPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'settingsPayload' is not null or undefined
            assertParamExists('apiUpdateSettingsSettingsPut', 'settingsPayload', settingsPayload)
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(settingsPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Return current pricing and configuration.
         * @summary Api Get Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetSettingsSettingsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGetSettingsSettingsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingsApi.apiGetSettingsSettingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Persist updated configuration values.
         * @summary Api Update Settings
         * @param {SettingsPayload} settingsPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUpdateSettingsSettingsPut(settingsPayload: SettingsPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUpdateSettingsSettingsPut(settingsPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingsApi.apiUpdateSettingsSettingsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsApiFp(configuration)
    return {
        /**
         * Return current pricing and configuration.
         * @summary Api Get Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetSettingsSettingsGet(options?: RawAxiosRequestConfig): AxiosPromise<SettingsPayload> {
            return localVarFp.apiGetSettingsSettingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Persist updated configuration values.
         * @summary Api Update Settings
         * @param {SettingsPayload} settingsPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateSettingsSettingsPut(settingsPayload: SettingsPayload, options?: RawAxiosRequestConfig): AxiosPromise<SettingsPayload> {
            return localVarFp.apiUpdateSettingsSettingsPut(settingsPayload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     * Return current pricing and configuration.
     * @summary Api Get Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public apiGetSettingsSettingsGet(options?: RawAxiosRequestConfig) {
        return SettingsApiFp(this.configuration).apiGetSettingsSettingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Persist updated configuration values.
     * @summary Api Update Settings
     * @param {SettingsPayload} settingsPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public apiUpdateSettingsSettingsPut(settingsPayload: SettingsPayload, options?: RawAxiosRequestConfig) {
        return SettingsApiFp(this.configuration).apiUpdateSettingsSettingsPut(settingsPayload, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SetupApi - axios parameter creator
 * @export
 */
export const SetupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create admin settings and initial user.
         * @summary Setup
         * @param {SetupPayload} setupPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupSetupPost: async (setupPayload: SetupPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setupPayload' is not null or undefined
            assertParamExists('setupSetupPost', 'setupPayload', setupPayload)
            const localVarPath = `/setup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setupPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if setup has already been completed.
         * @summary Setup Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupStatusSetupGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/setup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SetupApi - functional programming interface
 * @export
 */
export const SetupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SetupApiAxiosParamCreator(configuration)
    return {
        /**
         * Create admin settings and initial user.
         * @summary Setup
         * @param {SetupPayload} setupPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setupSetupPost(setupPayload: SetupPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setupSetupPost(setupPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SetupApi.setupSetupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Check if setup has already been completed.
         * @summary Setup Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setupStatusSetupGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setupStatusSetupGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SetupApi.setupStatusSetupGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SetupApi - factory interface
 * @export
 */
export const SetupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SetupApiFp(configuration)
    return {
        /**
         * Create admin settings and initial user.
         * @summary Setup
         * @param {SetupPayload} setupPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupSetupPost(setupPayload: SetupPayload, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.setupSetupPost(setupPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if setup has already been completed.
         * @summary Setup Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupStatusSetupGet(options?: RawAxiosRequestConfig): AxiosPromise<SettingsPayload> {
            return localVarFp.setupStatusSetupGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SetupApi - object-oriented interface
 * @export
 * @class SetupApi
 * @extends {BaseAPI}
 */
export class SetupApi extends BaseAPI {
    /**
     * Create admin settings and initial user.
     * @summary Setup
     * @param {SetupPayload} setupPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SetupApi
     */
    public setupSetupPost(setupPayload: SetupPayload, options?: RawAxiosRequestConfig) {
        return SetupApiFp(this.configuration).setupSetupPost(setupPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if setup has already been completed.
     * @summary Setup Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SetupApi
     */
    public setupStatusSetupGet(options?: RawAxiosRequestConfig) {
        return SetupApiFp(this.configuration).setupStatusSetupGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TrackApi - axios parameter creator
 * @export
 */
export const TrackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Track Booking
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackBookingApiV1TrackCodeGet: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('trackBookingApiV1TrackCodeGet', 'code', code)
            const localVarPath = `/api/v1/track/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrackApi - functional programming interface
 * @export
 */
export const TrackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrackApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Track Booking
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackBookingApiV1TrackCodeGet(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackBookingApiV1TrackCodeGet(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrackApi.trackBookingApiV1TrackCodeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TrackApi - factory interface
 * @export
 */
export const TrackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrackApiFp(configuration)
    return {
        /**
         * 
         * @summary Track Booking
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackBookingApiV1TrackCodeGet(code: string, options?: RawAxiosRequestConfig): AxiosPromise<TrackResponse> {
            return localVarFp.trackBookingApiV1TrackCodeGet(code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrackApi - object-oriented interface
 * @export
 * @class TrackApi
 * @extends {BaseAPI}
 */
export class TrackApi extends BaseAPI {
    /**
     * 
     * @summary Track Booking
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackApi
     */
    public trackBookingApiV1TrackCodeGet(code: string, options?: RawAxiosRequestConfig) {
        return TrackApiFp(this.configuration).trackBookingApiV1TrackCodeGet(code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Register a new user in the system.
         * @summary Api Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateUserUsersPost: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('apiCreateUserUsersPost', 'userCreate', userCreate)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a user permanently.
         * @summary Api Delete User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteUserUsersUserIdDelete: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiDeleteUserUsersUserIdDelete', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the currently authenticated user\'s profile.
         * @summary Api Get Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetMeUsersMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a single user by ID.
         * @summary Api Get User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetUserUsersUserIdGet: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiGetUserUsersUserIdGet', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all existing users.
         * @summary Api List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListUsersUsersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allow the current user to update their profile.
         * @summary Api Update Me
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateMeUsersMePatch: async (userUpdate: UserUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUpdate' is not null or undefined
            assertParamExists('apiUpdateMeUsersMePatch', 'userUpdate', userUpdate)
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update selected fields of a user.
         * @summary Api Update User
         * @param {number} userId 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateUserUsersUserIdPatch: async (userId: number, userUpdate: UserUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiUpdateUserUsersUserIdPatch', 'userId', userId)
            // verify required parameter 'userUpdate' is not null or undefined
            assertParamExists('apiUpdateUserUsersUserIdPatch', 'userUpdate', userUpdate)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Register a new user in the system.
         * @summary Api Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCreateUserUsersPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCreateUserUsersPost(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiCreateUserUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove a user permanently.
         * @summary Api Delete User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDeleteUserUsersUserIdDelete(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDeleteUserUsersUserIdDelete(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiDeleteUserUsersUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the currently authenticated user\'s profile.
         * @summary Api Get Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetMeUsersMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGetMeUsersMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiGetMeUsersMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a single user by ID.
         * @summary Api Get User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetUserUsersUserIdGet(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGetUserUsersUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiGetUserUsersUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return all existing users.
         * @summary Api List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiListUsersUsersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiListUsersUsersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiListUsersUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allow the current user to update their profile.
         * @summary Api Update Me
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUpdateMeUsersMePatch(userUpdate: UserUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUpdateMeUsersMePatch(userUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUpdateMeUsersMePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update selected fields of a user.
         * @summary Api Update User
         * @param {number} userId 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUpdateUserUsersUserIdPatch(userId: number, userUpdate: UserUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUpdateUserUsersUserIdPatch(userId, userUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUpdateUserUsersUserIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Register a new user in the system.
         * @summary Api Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateUserUsersPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): AxiosPromise<UserRead> {
            return localVarFp.apiCreateUserUsersPost(userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a user permanently.
         * @summary Api Delete User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteUserUsersUserIdDelete(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDeleteUserUsersUserIdDelete(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the currently authenticated user\'s profile.
         * @summary Api Get Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetMeUsersMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UserRead> {
            return localVarFp.apiGetMeUsersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single user by ID.
         * @summary Api Get User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetUserUsersUserIdGet(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<UserRead> {
            return localVarFp.apiGetUserUsersUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all existing users.
         * @summary Api List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListUsersUsersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserRead>> {
            return localVarFp.apiListUsersUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Allow the current user to update their profile.
         * @summary Api Update Me
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateMeUsersMePatch(userUpdate: UserUpdate, options?: RawAxiosRequestConfig): AxiosPromise<UserRead> {
            return localVarFp.apiUpdateMeUsersMePatch(userUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Update selected fields of a user.
         * @summary Api Update User
         * @param {number} userId 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateUserUsersUserIdPatch(userId: number, userUpdate: UserUpdate, options?: RawAxiosRequestConfig): AxiosPromise<UserRead> {
            return localVarFp.apiUpdateUserUsersUserIdPatch(userId, userUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Register a new user in the system.
     * @summary Api Create User
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiCreateUserUsersPost(userCreate: UserCreate, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiCreateUserUsersPost(userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a user permanently.
     * @summary Api Delete User
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiDeleteUserUsersUserIdDelete(userId: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiDeleteUserUsersUserIdDelete(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the currently authenticated user\'s profile.
     * @summary Api Get Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiGetMeUsersMeGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiGetMeUsersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a single user by ID.
     * @summary Api Get User
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiGetUserUsersUserIdGet(userId: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiGetUserUsersUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all existing users.
     * @summary Api List Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiListUsersUsersGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiListUsersUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allow the current user to update their profile.
     * @summary Api Update Me
     * @param {UserUpdate} userUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUpdateMeUsersMePatch(userUpdate: UserUpdate, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUpdateMeUsersMePatch(userUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update selected fields of a user.
     * @summary Api Update User
     * @param {number} userId 
     * @param {UserUpdate} userUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUpdateUserUsersUserIdPatch(userId: number, userUpdate: UserUpdate, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUpdateUserUsersUserIdPatch(userId, userUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}




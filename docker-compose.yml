version: '3.8'

services:
  frontend:
    hostname: limo-booking-app-frontend
    env_file:
      - ./frontend/.env.production
    build:
      context: ./frontend
    # ports:
    #   - "3000:3000"
    # environment:
    #   - VITE_API_BASE_URL=https://dev.lan.ddnsgeek.com
    depends_on:
      - backend
    labels:
      - "traefik.enable=true"
#      - "traefik.docker.network=proxy"
      - "traefik.http.routers.dev.rule=Host(`dev.lan.ddnsgeek.com`)"
      - "traefik.http.routers.dev.entrypoints=websecure"
      - "traefik.http.routers.dev.tls=true"
      - "traefik.http.routers.dev.tls.certresolver=myresolver"
      - "traefik.http.services.dev.loadbalancer.server.port=3000"
      - "io.portainer.accesscontrol.public"
      - "traefik.http.routers.dev.middlewares=error-pages-middleware"
    networks:
#      - proxy
      - traefik_reverse_proxy
  backend:
    hostname: limo-booking-app-backend
    build:
      context: ./backend
    env_file:
      - ./backend/.env.production
    # ports:
    #   - "8000:8000"
    environment:
      # - DATABASE_PATH=/data/app.db  # or your production DB
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ORS_API_KEY=${ORS_API_KEY}
    volumes:
     - ./data:/data:rw  # If using SQLite
    labels:
      - traefik.enable=true
      # Router for the API on the SAME host, but only when path starts with /api
      - traefik.http.routers.api.rule=Host(`dev.lan.ddnsgeek.com`) && PathPrefix(`/api`)
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.tls.certresolver=myresolver
      # Strip the /api prefix before forwarding to FastAPI (so /api/auth -> /auth)
      - traefik.http.middlewares.api-strip.stripprefix.prefixes=/api
      - traefik.http.routers.api.middlewares=api-strip
      # Traefik should talk to port 8000 inside the container
      - traefik.http.services.api.loadbalancer.server.port=8000
    networks:
#      - proxy
      - traefik_reverse_proxy

#volumes:
#  gitea_data:

networks:
  traefik_reverse_proxy:
    external: true
"""add domain models for limo booking"""

import uuid
from datetime import datetime, timezone

import sqlalchemy as sa
from sqlalchemy import inspect

from alembic import op

# revision identifiers, used by Alembic.
revision = "4b82e5a1c3b5"
down_revision = "7b3e2fb1d3d4"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    userrole = sa.Enum("DRIVER", "CUSTOMER", name="userrole")
    bookingstatus = sa.Enum(
        "PENDING",
        "DRIVER_CONFIRMED",
        "DECLINED",
        "ON_THE_WAY",
        "ARRIVED_PICKUP",
        "IN_PROGRESS",
        "ARRIVED_DROPOFF",
        "COMPLETED",
        "CANCELLED",
        name="bookingstatus",
    )
    notificationtype = sa.Enum(
        "NEW_BOOKING",
        "CONFIRMATION",
        "LEAVE_NOW",
        "ON_THE_WAY",
        "ARRIVED_PICKUP",
        "STARTED",
        "ARRIVED_DROPOFF",
        "COMPLETED",
        name="notificationtype",
    )
    notificationrole = sa.Enum("CUSTOMER", "DRIVER", name="notificationrole")

    bind = op.get_bind()
    inspector = inspect(bind)

    if not inspector.has_table("users_v2"):
        op.create_table(
            "users_v2",
            sa.Column(
                "id", sa.dialects.postgresql.UUID(as_uuid=True), primary_key=True
            ),
            sa.Column("email", sa.String(), nullable=False, unique=True),
            sa.Column("name", sa.String(), nullable=False),
            sa.Column("role", userrole, nullable=False, server_default="CUSTOMER"),
            sa.Column(
                "created_at", sa.DateTime(timezone=True), server_default=sa.func.now()
            ),
            sa.Column(
                "updated_at", sa.DateTime(timezone=True), server_default=sa.func.now()
            ),
        )

    if not inspector.has_table("availability_slots"):
        op.create_table(
            "availability_slots",
            sa.Column("id", sa.Integer(), primary_key=True),
            sa.Column("start_dt", sa.DateTime(timezone=True), nullable=False),
            sa.Column("end_dt", sa.DateTime(timezone=True), nullable=False),
            sa.Column("reason", sa.String(), nullable=True),
        )

    if not inspector.has_table("bookings_v2"):
        op.create_table(
            "bookings_v2",
            sa.Column(
                "id", sa.dialects.postgresql.UUID(as_uuid=True), primary_key=True
            ),
            sa.Column("public_code", sa.String(length=20), nullable=False, unique=True),
            sa.Column(
                "status", bookingstatus, nullable=False, server_default="PENDING"
            ),
            sa.Column(
                "customer_id",
                sa.dialects.postgresql.UUID(as_uuid=True),
                sa.ForeignKey("users_v2.id"),
                nullable=False,
            ),
            sa.Column("pickup_address", sa.String(), nullable=False),
            sa.Column("pickup_lat", sa.Float(), nullable=False),
            sa.Column("pickup_lng", sa.Float(), nullable=False),
            sa.Column("dropoff_address", sa.String(), nullable=False),
            sa.Column("dropoff_lat", sa.Float(), nullable=False),
            sa.Column("dropoff_lng", sa.Float(), nullable=False),
            sa.Column("pickup_when", sa.DateTime(timezone=True), nullable=False),
            sa.Column("notes", sa.String(), nullable=True),
            sa.Column("passengers", sa.Integer(), nullable=False),
            sa.Column("estimated_price_cents", sa.Integer(), nullable=False),
            sa.Column("final_price_cents", sa.Integer(), nullable=True),
            sa.Column("deposit_required_cents", sa.Integer(), nullable=False),
            sa.Column("deposit_payment_intent_id", sa.String(), nullable=True),
            sa.Column("final_payment_intent_id", sa.String(), nullable=True),
            sa.Column(
                "created_at", sa.DateTime(timezone=True), server_default=sa.func.now()
            ),
            sa.Column(
                "updated_at", sa.DateTime(timezone=True), server_default=sa.func.now()
            ),
        )

    if not inspector.has_table("trips"):
        op.create_table(
            "trips",
            sa.Column(
                "id", sa.dialects.postgresql.UUID(as_uuid=True), primary_key=True
            ),
            sa.Column(
                "booking_id",
                sa.dialects.postgresql.UUID(as_uuid=True),
                sa.ForeignKey("bookings_v2.id"),
                nullable=False,
            ),
            sa.Column("started_at", sa.DateTime(timezone=True), nullable=False),
            sa.Column("ended_at", sa.DateTime(timezone=True), nullable=True),
            sa.Column(
                "distance_meters", sa.Integer(), nullable=False, server_default="0"
            ),
            sa.Column(
                "duration_seconds", sa.Integer(), nullable=False, server_default="0"
            ),
        )

    if not inspector.has_table("route_points"):
        op.create_table(
            "route_points",
            sa.Column(
                "id", sa.dialects.postgresql.UUID(as_uuid=True), primary_key=True
            ),
            sa.Column(
                "booking_id",
                sa.dialects.postgresql.UUID(as_uuid=True),
                sa.ForeignKey("bookings_v2.id"),
                nullable=False,
            ),
            sa.Column("ts", sa.DateTime(timezone=True), nullable=False),
            sa.Column("lat", sa.Float(), nullable=False),
            sa.Column("lng", sa.Float(), nullable=False),
            sa.Column("speed", sa.Float(), nullable=True),
        )

    if not inspector.has_table("notifications"):
        op.create_table(
            "notifications",
            sa.Column(
                "id", sa.dialects.postgresql.UUID(as_uuid=True), primary_key=True
            ),
            sa.Column(
                "booking_id",
                sa.dialects.postgresql.UUID(as_uuid=True),
                sa.ForeignKey("bookings_v2.id"),
                nullable=True,
            ),
            sa.Column("type", notificationtype, nullable=False),
            sa.Column("to_role", notificationrole, nullable=False),
            sa.Column("payload", sa.JSON(), nullable=False, server_default="{}"),
            sa.Column(
                "created_at", sa.DateTime(timezone=True), server_default=sa.func.now()
            ),
        )

    if not inspector.has_table("admin_config"):
        op.create_table(
            "admin_config",
            sa.Column("id", sa.Integer(), primary_key=True),
            sa.Column("account_mode", sa.Boolean(), nullable=False, server_default="0"),
            sa.Column("flagfall", sa.Float(), nullable=False, server_default="0"),
            sa.Column("per_km_rate", sa.Float(), nullable=False, server_default="0"),
            sa.Column(
                "per_minute_rate", sa.Float(), nullable=False, server_default="0"
            ),
        )

    # Seed a single driver user
    users_table = sa.table(
        "users_v2",
        sa.column("id", sa.dialects.postgresql.UUID(as_uuid=True)),
        sa.column("email", sa.String()),
        sa.column("name", sa.String()),
        sa.column("role", userrole),
        sa.column("created_at", sa.DateTime(timezone=True)),
        sa.column("updated_at", sa.DateTime(timezone=True)),
    )
    op.bulk_insert(
        users_table,
        [
            {
                "id": uuid.uuid4(),
                "email": "driver@example.com",
                "name": "Driver",
                "role": "DRIVER",
                "created_at": datetime.now(timezone.utc),
                "updated_at": datetime.now(timezone.utc),
            }
        ],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = inspect(bind)
    for table in [
        "notifications",
        "route_points",
        "trips",
        "bookings_v2",
        "availability_slots",
        "users_v2",
    ]:
        if inspector.has_table(table):
            op.drop_table(table)
    sa.Enum(name="notificationrole").drop(bind, checkfirst=True)
    sa.Enum(name="notificationtype").drop(bind, checkfirst=True)
    sa.Enum(name="bookingstatus").drop(bind, checkfirst=True)
    sa.Enum(name="userrole").drop(bind, checkfirst=True)
    # ### end Alembic commands ###

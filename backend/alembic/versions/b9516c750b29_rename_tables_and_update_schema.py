"""Rename tables and update schema

Revision ID: b9516c750b29
Revises:
Create Date: 2025-08-04 19:03:07.141963
"""

import sqlalchemy as sa
from sqlalchemy import inspect

from alembic import op

# revision identifiers, used by Alembic.
revision = "b9516c750b29"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    inspector = inspect(op.get_bind())

    if not inspector.has_table("admin_config"):
        op.create_table(
            "admin_config",
            sa.Column("id", sa.Integer(), nullable=False),
            sa.Column("allow_public_registration", sa.Boolean(), nullable=True),
            sa.Column("google_maps_api_key", sa.String(), nullable=True),
            sa.Column("flagfall", sa.Float(), nullable=True),
            sa.Column("per_km_rate", sa.Float(), nullable=True),
            sa.Column("per_min_rate", sa.Float(), nullable=True),
            sa.PrimaryKeyConstraint("id"),
        )
        with op.batch_alter_table("admin_config", schema=None) as batch_op:
            batch_op.create_index(
                batch_op.f("ix_admin_config_id"), ["id"], unique=False
            )

    if not inspector.has_table("users"):
        op.create_table(
            "users",
            sa.Column("id", sa.Integer(), nullable=False),
            sa.Column("email", sa.Text(), nullable=False),
            sa.Column("full_name", sa.Text(), nullable=False),
            sa.Column("password_hash", sa.Text(), nullable=False),
            sa.Column("is_approved", sa.Boolean(), nullable=False),
            sa.Column("role", sa.Text(), nullable=False),
            sa.PrimaryKeyConstraint("id"),
        )
        with op.batch_alter_table("users", schema=None) as batch_op:
            indexes = [idx["name"] for idx in inspector.get_indexes("users")]
            if "ix_users_email" not in indexes:
                batch_op.create_index(
                    batch_op.f("ix_users_email"), ["email"], unique=True
                )

    if not inspector.has_table("bookings"):
        op.create_table(
            "bookings",
            sa.Column("id", sa.Integer(), nullable=False),
            sa.Column("user_id", sa.Integer(), nullable=True),
            sa.Column("pickup_location", sa.String(), nullable=True),
            sa.Column("dropoff_location", sa.String(), nullable=True),
            sa.Column("time", sa.String(), nullable=True),
            sa.Column("status", sa.Text(), nullable=False),
            sa.Column("price", sa.Float(), nullable=False),
            sa.ForeignKeyConstraint(["user_id"], ["users.id"]),
            sa.PrimaryKeyConstraint("id"),
        )
        with op.batch_alter_table("bookings", schema=None) as batch_op:
            indexes = [idx["name"] for idx in inspector.get_indexes("bookings")]
            if "ix_bookings_id" not in indexes:
                batch_op.create_index(
                    batch_op.f("ix_bookings_id"), ["id"], unique=False
                )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = inspect(bind)

    with op.batch_alter_table("bookings", schema=None) as batch_op:
        indexes = [idx["name"] for idx in inspector.get_indexes("bookings")]
        if "ix_bookings_id" in indexes:
            batch_op.drop_index(batch_op.f("ix_bookings_id"))
    if inspector.has_table("bookings"):
        op.drop_table("bookings")

    with op.batch_alter_table("users", schema=None) as batch_op:
        indexes = [idx["name"] for idx in inspector.get_indexes("users")]
        if "ix_users_email" in indexes:
            batch_op.drop_index(batch_op.f("ix_users_email"))
    if inspector.has_table("users"):
        op.drop_table("users")

    with op.batch_alter_table("admin_config", schema=None) as batch_op:
        indexes = [idx["name"] for idx in inspector.get_indexes("admin_config")]
        if "ix_admin_config_id" in indexes:
            batch_op.drop_index(batch_op.f("ix_admin_config_id"))
    if inspector.has_table("admin_config"):
        op.drop_table("admin_config")
    # ### end Alembic commands ###

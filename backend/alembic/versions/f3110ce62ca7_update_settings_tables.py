"""update settings tables

Revision ID: f3110ce62ca7
Revises: 421d3db8d5bd
Create Date: 2025-08-17 16:51:31.929950

"""

import sqlalchemy as sa
from sqlalchemy import inspect

from alembic import op


def _has_column(inspector, table, column):
    return column in [c["name"] for c in inspector.get_columns(table)]


# revision identifiers, used by Alembic.
revision = "f3110ce62ca7"
down_revision = "421d3db8d5bd"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = inspect(bind)

    with op.batch_alter_table("admin_config", schema=None) as batch_op:
        if not _has_column(inspector, "admin_config", "account_mode"):
            batch_op.add_column(sa.Column("account_mode", sa.Boolean(), nullable=False))
        if not _has_column(inspector, "admin_config", "per_minute_rate"):
            batch_op.add_column(
                sa.Column("per_minute_rate", sa.Float(), nullable=False)
            )
        if _has_column(inspector, "admin_config", "google_maps_api_key"):
            batch_op.alter_column(
                "google_maps_api_key", existing_type=sa.VARCHAR(), nullable=False
            )
        if _has_column(inspector, "admin_config", "flagfall"):
            batch_op.alter_column("flagfall", existing_type=sa.FLOAT(), nullable=False)
        if _has_column(inspector, "admin_config", "per_km_rate"):
            batch_op.alter_column(
                "per_km_rate", existing_type=sa.FLOAT(), nullable=False
            )
        indexes = [idx["name"] for idx in inspector.get_indexes("admin_config")]
        if "ix_admin_config_id" in indexes:
            batch_op.drop_index(batch_op.f("ix_admin_config_id"))
        if _has_column(inspector, "admin_config", "per_min_rate"):
            batch_op.drop_column("per_min_rate")
        if _has_column(inspector, "admin_config", "allow_public_registration"):
            batch_op.drop_column("allow_public_registration")

    with op.batch_alter_table("bookings", schema=None) as batch_op:
        if _has_column(inspector, "bookings", "user_id"):
            batch_op.alter_column("user_id", existing_type=sa.INTEGER(), nullable=False)
        if _has_column(inspector, "bookings", "pickup_location"):
            batch_op.alter_column(
                "pickup_location", existing_type=sa.VARCHAR(), nullable=False
            )
        if _has_column(inspector, "bookings", "dropoff_location"):
            batch_op.alter_column(
                "dropoff_location", existing_type=sa.VARCHAR(), nullable=False
            )
        if _has_column(inspector, "bookings", "time"):
            batch_op.alter_column(
                "time", existing_type=sa.VARCHAR(), type_=sa.DateTime(), nullable=False
            )
        indexes = [idx["name"] for idx in inspector.get_indexes("bookings")]
        if "ix_bookings_id" in indexes:
            batch_op.drop_index(batch_op.f("ix_bookings_id"))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = inspect(bind)

    with op.batch_alter_table("bookings", schema=None) as batch_op:
        indexes = [idx["name"] for idx in inspector.get_indexes("bookings")]
        if "ix_bookings_id" not in indexes:
            batch_op.create_index(batch_op.f("ix_bookings_id"), ["id"], unique=False)
        if _has_column(inspector, "bookings", "time"):
            batch_op.alter_column(
                "time", existing_type=sa.DateTime(), type_=sa.VARCHAR(), nullable=True
            )
        if _has_column(inspector, "bookings", "dropoff_location"):
            batch_op.alter_column(
                "dropoff_location", existing_type=sa.VARCHAR(), nullable=True
            )
        if _has_column(inspector, "bookings", "pickup_location"):
            batch_op.alter_column(
                "pickup_location", existing_type=sa.VARCHAR(), nullable=True
            )
        if _has_column(inspector, "bookings", "user_id"):
            batch_op.alter_column("user_id", existing_type=sa.INTEGER(), nullable=True)

    with op.batch_alter_table("admin_config", schema=None) as batch_op:
        if not _has_column(inspector, "admin_config", "allow_public_registration"):
            batch_op.add_column(
                sa.Column("allow_public_registration", sa.BOOLEAN(), nullable=True)
            )
        if not _has_column(inspector, "admin_config", "per_min_rate"):
            batch_op.add_column(sa.Column("per_min_rate", sa.FLOAT(), nullable=True))
        indexes = [idx["name"] for idx in inspector.get_indexes("admin_config")]
        if "ix_admin_config_id" not in indexes:
            batch_op.create_index(
                batch_op.f("ix_admin_config_id"), ["id"], unique=False
            )
        if _has_column(inspector, "admin_config", "per_km_rate"):
            batch_op.alter_column(
                "per_km_rate", existing_type=sa.FLOAT(), nullable=True
            )
        if _has_column(inspector, "admin_config", "flagfall"):
            batch_op.alter_column("flagfall", existing_type=sa.FLOAT(), nullable=True)
        if _has_column(inspector, "admin_config", "google_maps_api_key"):
            batch_op.alter_column(
                "google_maps_api_key", existing_type=sa.VARCHAR(), nullable=True
            )
        if _has_column(inspector, "admin_config", "per_minute_rate"):
            batch_op.drop_column("per_minute_rate")
        if _has_column(inspector, "admin_config", "account_mode"):
            batch_op.drop_column("account_mode")

    # ### end Alembic commands ###
